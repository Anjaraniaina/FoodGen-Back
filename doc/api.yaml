openapi: 3.0.3
info:
  version: 'latest'
  title: FoodGen - API
  description: |
    A simple API that creates random food
security:
  - BearerAuth: []
paths:
  '/ping':
    get:
      tags:
        - Health
      summary: Health check of the server
      description: Check if the server is up or not
      operationId: ping
      responses:
        '200':
          description: pong
          content:
            text/plain:
              schema:
                type: string
                example: Hello world
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  '/users':
    put:
      tags:
        - User
      summary: Create or update users
      operationId: crupdateUsers
      requestBody:
        description: List of users to be crupdated
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: return a list crupdated users.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  '/singIn':
    put:
      tags:
        - Auth
      summary: Logs user into the system
      operationId: signIn
      requestBody:
        description: User to sign up
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '200':
          description: User created and authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedUser'
        '400':
          description: Invalid username/password supplied
        '404':
          description: Ressource not found
        '500':
          description: Server error
  '/signup':
    put:
      tags:
        - Auth
      summary: Sign up a user
      operationId: signUp
      requestBody:
        description: User to sign up
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '200':
          description: User created and authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedUser'
        '400':
          description: Invalid username/password supplied
        '404':
          description: Ressource not found
        '500':
          description: Server error
  '/users/{username}':
    get:
      tags:
        - User
      summary: Get user by username
      operationId: getUserByUsername
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return the specific user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  '/regions':
    get:
      tags:
        - Region
      summary: get all available regions
      operationId: getRegions
      parameters:
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Page'
        - name: page_size
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PageSize'
      responses:
        '200':
          description: return a list of regions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Region'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Region
      summary: Create or update regions
      operationId: crupdateRegions
      requestBody:
        description: List of regions to be crupdated
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/Region'
      responses:
        '200':
          description: return a list crupdated regions.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Region'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/regions/{id}':
    get:
      tags:
        - Region
      summary: get a specific region by its id
      operationId: getRegionById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return the specified region
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Region
      summary: delelte a specific region by its id
      operationId: deleteRegionById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: removed successfully
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  '/recipes/{id}':
    get:
      tags:
        - recipe
      summary: Get recipe by id
      operationId: getRecipeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return the specific recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  '/meals':
    get:
      tags:
        - Meal
      summary: Randomly pick meals
      operationId: getMeals
      responses:
        '200':
          description: return a list of meals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meal'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  '/ingredients/{id}':
    get:
      tags:
        - Ingredients
      summary: Get ingredients by id
      operationId: getIngredientsById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return a list recipe's ingredients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeIngredients'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'


  /allergy:
    get:
      tags:
        - allergy
      summary: Get user allergy
      operationId: getAllergy
      responses:
        '200':
          description: List of Allergy
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Allergy'
        '400':
          description: Error when sending the request
        '404':
          description: Ressources not found
        '500':
          description: Server error
components:
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          example: "user_one"
        first_name:
          type: string
          example: "Rio"
        last_name:
          type: string
          example: "Camero"
        email:
          type: string
          example: rio@email.com
        password:
          type: string
    LoggedUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          example: "user_one"
        role:
          type: string
        email:
          type: string
          example: rio@email.com
        token:
          type: string
    SignInRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    SignUpRequest:
      allOf:
        - $ref: '#/components/schemas/SignInRequest'
      properties:
        username:
          type: string
    UserPayload:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Region:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Italy
    Recipe:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Pizza
        readme:
          type: string
          example: Bunch of text
    Ingredient:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Tomato
    Allergy:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          $ref: '#/components/schemas/User'
        ingredient:
          $ref: '#/components/schemas/Ingredient'
    RecipeIngredients:
      type: object
      properties:
        id:
          type: string
          format: uuid
        recipe:
          $ref: '#/components/schemas/Recipe'
        ingredient:
          $ref: '#/components/schemas/Ingredient'
    Meal:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Pizza
        region:
          $ref: '#/components/schemas/Region'
        recipe:
          $ref: "#/components/schemas/Recipe"
        image:
          type: string
        download:
          type: integer
          example: 10

    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`

    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error